swagger: '2.0'

### information start ###
info:
  description: work.muxixyz.com API 
  version: 1.0.0
  title: Work API
  contact:
    email: shiina_orez@qq.com
  #license
### information end ###

host: work.muxixyz.com
basePath: /api/v1.0
schemes:
  - https
  - http

### tag start ###

tags:
  - name: auth
    description: 身份验证服务

  - name: management
    description: 成员管理服务

  - name: feed
    description: feed流服务

  - name: message
    description: 消息服务

  - name: project
    description: 项目服务

  - name: status
    description: 进度服务

  - name: file
    description: 文件服务
    
### tag end ###

### auth start ###

securityDefinitions:

  basic:
    type: basic
    description: http basic auth,即在请求头中添加Authorization字段，内容为base64.encode(“邮箱:muxi304”)

  token:
    type: apiKey
    description: token,然后在请求头中添加Authorization字段，内容为base64.encode(“token:”)
    name: token
    in: header

### auth end ###

### path start ###

paths:
  /auth/signup/:
    post:
      tags:
        - auth
      summary: Signup a account.
      description: Just save a list of user.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: data to fill the segments
          schema:
            required:
              - name
              - email
            properties:
              name:
                type: string
              email:
                type: string
              avatar:
                type: string
              tel:
                type: string
              teamID:
                type: integer
      responses:
        200:
          description: Signup successfully
        401:
          description: User already exist
  /auth/login/:
    post:
      tags:
        - auth
      summary: Login a account
      description: Get a token formed by user-info
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: data to mark who want a token
          schema:
            required:
              - username
            properties:
              username:
                type: string
      responses:
        200:
          description: Return a token
          schema:
            required:
              - token
            properties:
              token:
                type: string
  /auth/verify/:
     post:
      tags:
        - auth
      summary: API for verify the token
      description: verify token out of ddl
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: MetaData
          in: body
          description: token
          schema:
            required:
              - token
            properties:
              token:
                type: string
      responses:
        200:
          description: OK
          schema:
            required:
              - uid
            properties:
              uid:
                type: integer
        401:
          description: FAIL
  /group/new/:
    post:
      tags:
        - management
      summary: post a new group
      description: a groupName and a user list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: data to set a enw group
          schema:
            required:
              - groupName
              - userList
            properties:
              groupName:
                type: string
              userlist:
                type: array
                items:
                  required:
                    - userID
                  properties:
                    userID:
                      type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
      security:
      - token: []
  /group/{gid}/:
    delete:
      tags:
        - management
      summary: delete a group
      description: DANGER:must be superuser can delete a group
      produces:
        - application/json
      parameters:
        - in: path
          name: gid
          description: groupID
          required: true
          type: integer
      response:
        200:
          description: OK
        401:
          description: verify failed    
      security:
      - token: []  
  /group/{gid}/userList/:
    get:
      tags:
        - management
      summary: group user list
      description: get a user list by group id/ if gid ==0 ,get all users 
      produces:
        - application/json
      parameters:
        - in: path
          name: gid
          description: groupID
          required: true
          type: integer
        - in: path
          name: page
          description: default=1
          required: true
          type: integer
      responses:
        200:
          description: user list
          headers:
            links:
              type: string
              description: next page & last page url
          schema:
            required: 
              - count
              - list
            properties:
              count:
                type: integer
              list:
                type: array
                items:
                  required:
                    - username
                    - userID
#                    - groupName
                    - role
                    - email
                  properties:
                    username:
                      type: string
                    userID:
                      type: integer
#                    groupName:
#                      type: string
                    role:
                      type: integer
                    email:
                      type: string
      security:
      - token: []
  /group/list/:
    get:
      tags:
        - management
      summary: get a group list
      description: verify token and get a list/all group list
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            required:
              - groupList
            properties:
              groupList:
                type: array
                items:
                  required:
                    - groupID
                    - groupName
                    - userCount
                  properties:
                    groupID:
                      type: integer
                    groupName:
                      type: string
                    userCount:
                      type: integer
      security:
      - token: []            
  /project/{pid}/userList/:
    get:
      tags:
        - management
      summary: get project user list
      description: get a list of user by projectID
      produces:
        - application/json
      parameters:
        - in: path
          name: pid
          description: projectID
          required: true
          type: integer
        - in: path
          name: page
          description: page
          required: true
          type: integer
      responses:
        200:
          description: user list
          schema:
            required:
              - list
              - count
            properties:
              count:
                type: integer
              list:
                type: array
                items:
                  required:
                    - username
                    - userID
                    - avatar
                  properties:
                    username:
                      type: string
                    userID:
                      type: integer
                    avatar:
                      type: string 
      security:
      - token: []
#  /project/list/:
#    get:
#      tags:
#       - management
#      summary: only superuser & admin & group leader can get a project list
#     description: verify token and get a list
#      produces:
#        - application/json
#      responses:
#        200:
#          description: OK
#          schema:
#            required:
#              - projectList
#            properties:
#              projectList:
#                type: array
#                items:
#                  required:
#                    - projectID
#                    - projectName
#                    - userCount
#                  properties:
#                    projectID:
#                      type: integer
#                    projectName:
#                      type: string
#                    userCount:
#                      type: integer
#      security:
#      - token: []
  /user/project/list/:
    get:
      tags:
        - management
      summary: get a project list
      description: verify token and get a list/ if you are admin or superuser, get all projetc list
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: page
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            required:
              - list
              - count
            properties:
              count:
                type: integer
              list:
                type: array
                items:
                  required:
                    - projectID
                    - projectName
                    - userCount
                  properties:
                    projectID:
                      type: integer
                    projectName:
                      type: string
                    userCount:
                      type: integer
      security:
      - token: []
  /user/{uid}:
    delete:
      tags:
        - management
      summary: remove user out of team
      description: set role=0 and remove all data to None
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: uid
          description: user ID
          required: true
          type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
      security:
        - token: []

  /user/2bMember/:
    post:
      tags:
        - management
      summary: accept a new member
      description: receive a user ID
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: userID
          schema:
            required:
              - userID
            properties:
              userID:
                type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
        402:
          description: user already be a member
      security:
      - token: []
  /user/addAdmin/:
    post:
      tags:
        - management
      summary: super user add someone on admin list
      description: verify token and add a FK
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: who are the lucky dog
          schema:
            required:
              - luckydog
            properties:
              luckydog:
                type: string
      responses:
        200:
          description: luckydog be a admin
        403:
          description: ddl
        401:
          description: auth fail
      security:
      - token: []
  /user/{uid}/managePro/:
    post:
      tags:
        - management
      summary: project management
      description: get a list of project,and change user's project list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: uid
          description: user ID 
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: data to change projects
          schema:
            required:
              - projectList
            properties:
              projectList:
                type: array
                items:
                  required:
                    - projectID
                  properties:
                    projectID:
                      type: integer
      responses:
        200:
          description: change it successfully
        401:
          description: verify failed
      security:
      - token: []  
  /user/{uid}/manageGroup/:
    post:
      tags:
        - management
      summary: superuser change member's group
      description: just receive a groupID  
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: uid
          description: user ID
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: groupID
          schema:
            required:
              - groupID
            properties:
              groupID:
                type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
      security:
      - token: []
  /user/{uid}/setRole/:
    post:
      tags:
        - management
      summary: superuser set user's role
      description: receive a number and change it
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: uid
          description: user ID
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: role
          schema:
            required:
              - role
            properties:
              role:
                type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
      security:
      - token: []
  /user/{uid}/setting/:
    post:
      tags:
        - management
      summary: user's setting
      description: setting about message and email service
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: uid 
          description: user ID
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: message and email
          schema:
            required:
              - username
              - address
              - tel
              - message
              - email
            properties:
              username:
                type: string
              address:
                type: string
              tel:
                type: string
              message:
                type: boolean
              email:
                type: boolean
      responses:
        200:
          description: OK
        401:
          description: verify failed
      security:
      - token: []
  /feed/new/:
    post:
      tags:
        - feed
      summary: Add the events in the exchange
      description: KIND[1]process[2]file[3]comments[4]team. Create a events and send it to the exchange, and queue
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: data to create a event
          schema:
            required:
              - action
              - kind
              - sourceID
            properties:
              from:
                type: string
              action:
                type: string
              kind:
                type: integer
              sourceID:
                type: integer
      responses:
        200:
          description: feed add successfully
      security:
      - token: []
  /feed/list/:
    get:
      tags:
        - feed
      summary: API for getting a list of feeds
      description: Use mq's receive service to get feed from different queue.
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: page to get
          required: true
          type: string
      responses:
        200:
          description: feed list
          headers:
            links:
              type: string
              description: next page & last page url
          schema:
            type: array
            items:
              required:
                - creator
                - time
                - action
                - kind
                - sourceID
              properties:
                creator:
                  type: string
                time:
                  type: string
                action:
                  type: string
                kind:
                  type: integer
                sourceID:
                  type: integer
      security:
      - token: []
  /project/{pid}/doc/{fid}/comment/{cid}/:
    get:
      tags:
        - project
      summary: get information of a comment by id
      description: get username,avatar,time,including
      produces:
        - application/json
      parameters:
        - in: path
          name: cid
          description: comment id
          required: true
          type: integer
        - in: path
          name: pid
          description: project ID
          required: true
          type: integer
        - in: path
          name: fid
          description: file ID
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            required:
              - username
              - avatar
              - time
              - content
            properties:
              username:
                type: string
              avatar:
                type: string
              time:
                type: string
              content:
                type: string
        401:
          description: verify failed
        402:
          description: can't find comment
      security:
      - token: []
    delete:
      tags:
        - project
      summary: delete a comment by id
      description: admin
      produces:
        - application/json
      parameters:
        - in: path
          name: cid
          description: comment id
          required: true
          type: integer
        - in: path
          name: pid
          description: project ID
          required: true
          type: integer
        - in: path
          name: fid
          description: file ID
          required: true
          type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
        402:
          description: can't find
      security:
      - token: []
  /project/{pid}/doc/{fid}/comments/:
    get:
      tags:
        - project
      summary: get a list of comment
      description: get
      produces:
        - application/json
      parameters:
        - in: path
          name: pid
          description: project ID
          required: true
          type: integer
        - in: path
          name: fid
          description: file ID
          required: true
          type: integer
        - in: path
          name: page
          description: default=1
          required: true
          type: integer
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: next page & last page url
          schema:
            required:
              - commentList
            properties:
              commentList:
                type: array
                items:
                  required:
                    - username
                    - avatar
                    - time
                    - content
                  properties:
                    username:
                      type: string
                    avatar:
                      type: string
                    time:
                      type: string
                    content:
                      type: string
        401:
          description: verify failed
        402:
          description: project or file not found
      security:
      - token: []
    post:
      tags:
        - project
      summary: comment a file or doc
      description: verify and post 
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: pid
          description: project ID
          required: true
          type: integer
        - in: path
          name: fid
          description: file or doc ID
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: post a new comment
          schema:
            required:
              - content
            properties:
              content:
                type: string
      responses:
        201:
          description: OK
        401:
          description: verify failed
        402:
          description: project or file not found       
      security:
      - token: []
  /message/new/:
    post:
      tags:
        - message
      summary: Make a new message to user.
      description: KIND[1]process[2]file[3]comments[4]team. Create a events and send it to the exchange, and queue
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: data to make a message
          schema:
            required:
              - receiver
              - maker
              - action
              - kind
              - sourceID
            properties:
              receiver:
                type: string
              maker:
                type: string
              action:
                type: string
              kind:
                type: integer
              sourceID:
                type: integer
      responses:
        200:
          description: message add successfully
      security:
      - token: []

  /folder/filetree/<int:pid>/:
    get:
      tags:
        - project
      summary: API for get the file_tree for a project
      description: get the file_tree for a project
      parameters:
        - in: path
          name: pid
          description: the ID of project
          required: true
          type: integer
      responses:
        200:
          description: get it
          schema:
            required:
              - filetree
            properties:
              filetree:
                type: string
                description: the filetree of this project;
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
    put:
      tags:
        - project
      summary: API for update the filetree
      parameters:
        - in: path
          name: pid
          description: the ID of project
          required: true
          type: integer
        - name: filetree
          in: body
          description: the filetree you want to update
          schema:
            required:
              - filetree
            properties:
              filetree:
                type: string
                description: the filetree you want to update
      responses:
        200:
          description: update
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []

  /folder/doctree/<int:pid>/:
    get:
      tags:
        - project
      summary: API for get the doc_tree for a project
      description: get the doc_tree for a project
      parameters:
        - in: path
          name: pid
          description: the ID of project
          required: true
          type: integer
      responses:
        200:
          description: get it
          schema:
            required:
              - doctree
            properties:
              doctree:
                type: string
                description: the doctree of this project;
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
    put:
      tags:
        - project
      summary: API for update the filetree
      parameters:
        - in: path
          name: pid
          description: the ID of project
          required: true
          type: integer
        - name: doctree
          in: body
          description: the filetree you want to update
          schema:
            required:
              - doctree
            properties:
              doctree:
                type: string
                description: the filetree you want to update
      responses:
        200:
          description: update
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []



  /folder/file/:
    post:
      tags:
        - file
      summary: API for create a new folder of file
      description: create a new folder of file
      parameters:
        - name: data
          in: body
          schema:
            required:
              - foldername
              - project_id
            properties:
              foldername:
                type: string
                description: the name you will use for new folder
              project_id:
                type: integer
                description: which project the folder belong to
      responses:
        201:
          description: create it
          schema:
            required:
              - id
            properties:
              id:
                type: integer
                description: the id of the folder you create
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
      
      
  /folder/file/{id}/:    
    put:
      tags:
        - file
      summary: the API for update the folder's name
      description:  update the folder's name
      parameters:
        - in: path
          name: id
          type: integer
          description: which folder you want to change name
        - name: data
          in: body
          schema:
            required:
              - foldername
            properties:
              foldername:
                type: string
                description: the name you will change for folder for file
      responses:
        200:
          description: update
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
    delete:
      tags:
        - file
      summary: the API for delete a folder
      description:  delete a folder
      parameters:
        - in: path
          name: id
          type: integer
          description: which folder you want to delete
        - name: data
          description: 详细信息看下一行的Model，传入两个列表，包含这个文件夹里的内容的ID，当前文件夹的id一起放到folder里边吧。
          in: body
          schema:
            required:
              - folder
              - file
            properties:
              folder:
                type: array
                description: the children folders' id of this folder
              file:
                type: array
                description: the children files' id of this folder
      responses:
        200:
          description: delete
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []

  /folder/file/children/:
    post:
      tags:
        - file
      summary: API for get a folder of file
      description: get a folder of file
      parameters: 
        - name: data
          description:  详细信息看下一行的Model，传入两个列表，包含这个文件夹里的内容的ID。
          in: body
          schema:
            required:
              - folder
              - file
            properties:
              folder:
                type: array
                description: the children folders' id of this folder
              file:
                type: array
                description: the children files' id of this folder
      responses:
        200:
          description: get it
          schema:
            required:
              - FolderList
              - FileList
            properties:
              FolderList:
                type: array
                description: children folders of this folder
                items:
                  required:
                    - id
                    - name
                  properties: 
                    id:
                      type: integer
                      description: the id of folder
                    name: 
                      type: string
                      description: the name of folder
              FileList:
                type: array
                description: children files of this folder
                items:
                  required:
                    - id
                    - name
                    - lasteditor
                    - creator
                    - url
                    - create_time
                  properties:
                    id:
                      type: integer
                      description: the id of file
                    name: 
                      type: string
                      description: the name of file
                    creator:
                      type: string
                      description: the creator of this file
                    url:
                      type: string
                      description: download url for file
                    create_time:
                      type: string
                      description: the create_time
        401:  
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []

  /folder/doc/:
    post:
      tags:
        - file
      summary: API for create a new folder of doc
      description: create a new folder of doc
      parameters:
        - name: data
          in: body
          schema:
            required:
              - foldername
              - project_id
            properties:
              foldername:
                type: string
                description: the name you will use for new folder for doc
              project_id:
                type: integer
                description: which project the folder belong to
      responses:
        201:
          description: create it
          schema:
            required:
              - id
            properties:
              id:
                type: integer
                description: the id of the folder you create
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
      

  /folder/doc/{id}/:    
    put:
      tags:
        - file
      summary: the API for update the folder's name
      description:  update the folder's name
      parameters:
        - in: path
          name: id
          type: integer
          description: which folder you want to change name
        - name: data
          in: body
          schema:
            required:
              - foldername
            properties:
              foldername:
                type: string
                description: the name you will change for folder for file
      responses:
        201:
          description: update
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
    delete:
      tags:
        - file
      summary: the API for delete a folder
      description:  delete a folder
      parameters:
        - in: path
          name: id
          type: integer
          description: which folder you want to delete
        - name: data
          description: 详细信息看下一行的Model，传入两个列表，包含这个文件夹里的内容的ID。
          in: body
          schema:
            required:
              - folder
              - doc
            properties:
              folder:
                type: array
                description: the children folders' id of this folder
              doc:
                type: array
                description: the children files' id of this folder
      responses:
        200:
          description: delete
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
    post:
      tags:
        - file
      summary: API for get a folder for md
      description: get a folder for md
      parameters: 
        - in: path
          name: fid
          type: integer
          description: which folder you want to get
        - name: data
          description: 详细信息看下一行的Model，传入两个列表，包含这个文件夹里的内容的ID。
          in: body
          schema:
            required:
              - folder
              - doc
            properties:
              folder:
                type: array
                description: the children folders' id of this folder
              doc:
                type: array
                description: the children files' id of this folder
      responses:
        200:
          description: get it
          schema:
            required:
              - FolderList
              - DocList
            properties:
              FolderList:
                type: array
                description: children folders of this folder
                items:
                  required:
                    - id
                    - name
                  properties: 
                    id:
                      type: integer
                      description: the id of folder
                    name: 
                      type: string
                      description: the name of folder
              DocList:
                type: array
                description: children md of this folder
                items:
                  required:
                    - id
                    - name
                    - lastcontent
                  properties:
                    id:
                      type: integer
                      description: the id of file
                    name: 
                      type: string
                      description: the name of file
                    lastcontent:
                      type: string
                      description: 最新内容可以用来做封面
        401:  
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []

  /file/file/:
    post:
      tags:
        - file
      summary: API for uploda a new file
      description: uploda a new file
      parameters:
        - name: data
          in: body
          schema:
            required:
              - file
              - project_id
            properties:
              file:
                type: text/plain
                description: the file you want to uploda
              project_id:
                type: integer
                description: which project this file belong to
      responses:
        201:
          description: create it
          schema:
            required:
              - id
            properties:
              id:
                type: integer
                description: the id of the file you create
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []

  /file/file/{id}/:
    # get:
    #   tags:
    #     - file
    #   summary: download a file
    #   description: download a file
    #   parameters:
    #     - in: path
    #       name: fid
    #       type: integer
    #       description: the file you want to download
    #   responses:
    #     200:
    #       description: give the information of this file
    #       schema:
    #         required:
    #           - name
    #           - lasteditor
    #           - creator
    #           - url
    #           - create_time
    #         properties:
    #           name: 
    #             type: string
    #             description: the name of file
    #           creator:
    #             type: string
    #             description: the creator of this file
    #           url:
    #             type: string
    #             description: download url for file
    #           create_time:
    #             type: string
    #             description: the create_time
    #     401:
    #       description: forbidden
    #     403:
    #       description: method not allowed
    #     500:
    #       description: server error
    #   security:
    #     - token: []
    delete:
      tags:
        - file
      summary: the API for delete a file
      description:  delete a file
      parameters:
        - in: path
          name: id
          type: integer
          description: which file you want to delete
      responses:
        200:
          description: delete
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []

  /file/doc/:
    post:
      tags:
        - file
      summary: API for create a new doc
      description: create a new doc
      parameters:
        - name: data
          in: body
          schema:
            required:
              - DocName
              - content
              - project_id
            properties:
              mdname:
                type: string
                description: the name of md
              content:
                type: string
                description: the content of this md
              project_id:
                type: integer
                description: which project this md belong to
      responses:
        201:
          description: create it
          schema:
            required:
              - id
            properties:
              id:
                type: integer
                description: the id of the md you create
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []

  /file/doc/{id}/:
    get:
      tags:
        - file
      summary: get the content of a doc
      description: get the content of a doc
      parameters:
        - in: path
          name: id
          type: integer
          description: the doc you want to get
      responses:
        200:
          description: give the information of this doc
          schema:
            required:
              - name
              - lasteditor
              - creator
              - conetnt
              - create_time
            properties:
              name: 
                type: string
                description: the name of doc
              creator:
                type: string
                description: the creator of this doc
              conetnt:
                type: string
                description: the content of this doc
              lasteditor:
                type: string
                description: the last user who edit this doc
              create_time:
                type: string
                description: the create_time
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
        - token: []
    delete:
      tags:
        - file
      summary: the API for delete a doc
      description:  delete a doc
      parameters:
        - in: path
          name: id
          type: integer
          description: which doc you want to delete
      responses:
        200:
          description: delete
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
    put:
      tags:
        - file
      summary: the API to update doc
      description: update doc
      parameters:
        - in: path
          name: mid
          description: id of doc
        - name: data
          in: body
          schema:
            required:
              - DocName
              - conetnt
            properties:
              DocName:
                type: string
                description: the name which you will use
              content:
                type: string
                description: the new content of doc
      responses:
        200:
          description: change it
        401:
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
  /project/re/:
    post:
      tags:
        - file
      summary: API for get re
      description: get re
      parameters: 
        - name: data
          description: 详细信息看下一行的Model，传入两个列表，包含这个回收站里的内容的ID。
          in: body
          schema:
            required:
              - file
              - doc
            properties:
              file:
                type: array
                description: 需要的文件的ID
              doc:
                type: array
                description: 需要的文档的ID
      responses:
        200:
          description: get it
          schema:
            required:
              - FileList
              - DocList
            properties:
              FileList:
                type: array
                description: children files of this folder
                items:
                  required:
                    - id
                    - name
                    - lasteditor
                    - creator
                    - url
                    - create_time
                  properties:
                    id:
                      type: integer
                      description: the id of file
                    name: 
                      type: string
                      description: the name of file
                    creator:
                      type: string
                      description: the creator of this file
                    url:
                      type: string
                      description: download url for file
                    create_time:
                      type: string
                      description: the create_time
              DocList:
                type: array
                description: children md of this folder
                items:
                  required:
                    - id
                    - name
                    - lastcontent
                  properties:
                    id:
                      type: integer
                      description: the id of file
                    name: 
                      type: string
                      description: the name of file
                    lastcontent:
                      type: string
                      description: 最新内容可以用来做封面
        401:  
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
    put:
      tags:
        - file
      summary: put back to the original position
      description: put back to the original position
      parameters: 
        - name: data
          description: 详细信息看下一行的Model，传入两个列表，包含要恢复的ID。
          in: body
          schema:
            required:
              - file
              - doc
            properties:
              file:
                type: array
                description: 恢复的文件的ID
              doc:
                type: array
                description: 恢复的文档的ID
      responses:
        200:
          description: recover
        401:  
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []
    delete:
      tags:
        - file
      summary: really delete
      description: really delete
      parameters: 
        - name: data
          description: 详细信息看下一行的Model，传入两个列表，包含要删除的ID。
          in: body
          schema:
            required:
              - file
              - doc
            properties:
              file:
                type: array
                description: 删除的文件的ID
              doc:
                type: array
                description: 删除的文档的ID
      responses:
        200:
          description: delete
        401:  
          description: forbidden
        403:
          description: method not allowed
        500:
          description: server error
      security:
      - token: []

  /message/list/:
    get:
      tags:
        - message
      summary: API for getting a list of massages
      description: Get a list of message by two ways.
      produces:
        - application/json
      parameters:
        - in: header
          name: kind
          description: KIND[1]hover[0]click
          required: true
          type: integer
        - in: path
          name: page
          description: default=1
          required: true
          type: integer
      responses:
        200:
          description: message list
          headers:
            links:
              type: string
              description: next page & last page url
          schema:
            type: array
            items:
              required:
                - sourceID
                - fromName
                - fromAvatar
                - time
                - sourceKind
                - readed
              properties:
                sourceID:
                  type: integer
                fromName:
                  type: string
                fromAvatar:
                  type: string
                time:
                  type: string
                sourceKind:
                  type: integer
                readed:
                  type: boolean
      security:
      - token: []
  /message/readAll/:
    post:
      tags:
        - message
      summary: click to read all messages
      description: verify and change all unreaded message
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: default=1
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: username
          schema:
            required:
              - username
            properties:
              username:
                type: string
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: next page & last page url
        401:
          description: verify failed
      security:
      - token: []
  /message/{username}/{mid}/:
    get:
      tags:
        - message
      summary: message information
      description: verify token and find id
      produces:
        - application/json
      parameters:
        - in: path
          name: mid
          description: messageID
          required: true
          type: integer
        - in: path
          name: username
          description: user's name to find user and verify
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            required:
              - msgID
              - fromName
              - time
              - action
              - sourceKind
              - sourceID
            properties:
              msgID:
                type: integer
              fromName:
                type: string
              time:
                type: string
              action:
                type: string
              sourceKind:
                type: integer
              sourceID:
                type: integer
        401:
          description: verify failed
        402:
          description: user isn't exist
        403:
          description: message isn't exist
      security:
      - token: []
  /user/attention/:
    post:
      tags:
        - message
      summary: post and you will pay attention to file or doc
      description: receive a fileID and add it to attention list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: fileID
          schema:
            required:
              - fileID
            properties:
              fileID:
                type: integer
      response:
        200:
          description: OK
        401:
          description: verify failed  
  /status/new/:
    post:
      tags:
        - status
      summary: post a statu
      description: receive including and title 
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: content and title
          schema:
            required:
              - content
              - title
            properties:
              content:
                type: string
              title:
                type: string
      responses:
        200:
          description: OK
        401:
          description: verify failed
      security:
      - token: []
  /status/{sid}/:
    get:
      tags:
        - status
      summary: get information of statu
      description: content title time like and user
      produces:
        - application/json
      parameters:
        - in: path
          name: sid
          description: statu ID
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            required:
              - title
              - content
              - time
              - likeCount
              - commentCount
              - userID
              - username
              - commentList
            properties:
              title:
                type: string
              content:
                type: string
              time:
                type: string
              likeCount:
                type: integer
              commentCount:
                type: integer
              userID:
                type: integer
              username:
                type: string
              commentList:
                type: array
                items:
                  required:
                    - username
                    - avatar
                    - time
                    - content
                  properties:
                    username:
                      type: string
                    avatar:
                      type: string
                    time:
                      type: string
                    content:
                      type: string
      security:
      - token: []
    delete:
      tags:
        - status
      summary: delete a statu
      description: delete
      produces:
        - application/json
      parameters:
        - in: path
          name: sid
          description: status ID
          required: true
          type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
      security:
      - token: []
  /status/list/:
    get:
      tags:
        - status
      summary: get a list of status
      description: one page have 20 status
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: page number
          required: true
          type: integer
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: next page & last page url
          schema:
            required:
              - statuList
            properties:
              statuList:
                type: array
                items:
                  required:
                    - username
                    - time
                    - avatar
                    - content
                    - likeCount
                    - commentCount
                  properties:
                    username:
                      type: string
                    time:
                      type: string
                    avatar:
                      type: string
                    content:
                      type: string
                    likeCount:
                      type: integer
                    commentCount:
                      type: integer
        401:
          description: verify failed
      security:
      - token: []
  /status/{uid}/list/:
    get:
      tags:
        - status
      summary: get a list of one user status
      description: one page have 20 status
      produces:
        - application/json
      parameters:
        - in: path
          name: page
          description: page number
          required: true
          type: integer
        - in: path
          name: uid
          description: user ID
          required: true
          type: integer
      responses:
        200:
          description: OK
#          headers:
#            links:
#              type: string
#              description: next page & last page url
          schema:
            required:
              - statuList
            properties:
              statuList:
                type: array
                items:
                  required:
                    - time
                    - content
                    - likeCount
                    - commentCount
                  properties:
                    time:
                      type: string
                    content:
                      type: string
                    likeCount:
                      type: integer
                    commentCount:
                      type: integer
        401:
          description: verify failed
      security:
      - token: []
  /status/{sid}/comment/{cid}/:
    get:
      tags:
        - status
      summary: get information of a comment by id
      description: get username,avatar,time,including
      produces:
        - application/json
      parameters:
        - in: path
          name: cid
          description: comment id
          required: true
          type: integer
        - in: path
          name: sid
          description: statu ID
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            required:
              - username
              - avatar
              - time
              - content
            properties:
              useranme:
                type: string
              avatar:
                type: string
              time:
                type: string
              content:
                type: string
        401:
          description: verify failed
        402:
          description: can't find comment
      security:
      - token: []
    delete:
      tags:
        - status
      summary: delete a comment by id
      description: admin
      produces:
        - application/json
      parameters:
        - in: path
          name: cid
          description: comment id
          required: true
          type: integer
        - in: path
          name: sid
          description: statu ID
          required: true
          type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
        402:
          description: can't find
      security:
      - token: []
  /status/{sid}/comments/:
    get:
      tags:
        - status
      summary: get a list of statu
      description: get
      produces:
        - application/json
      parameters:
        - in: path
          name: sid
          description: statu ID
          required: true
          type: integer
        - in: path
          name: page
          description: default=1
          required: true
          type: integer
      responses:
        200:
          description: OK
          headers:
            links:
              type: string
              description: next page & last page url
          schema:
            required:
              - commentList
            properties:
              commentList:
                type: array
                items:
                  required:
                    - username
                    - avatar
                    - time
                    - content
                  properties:
                    username:
                      type: string
                    avatar:
                      type: string
                    time:
                      type: string
                    content:
                      type: string
        401:
          description: verify failed
        402:
          description: statu not found
      security:
      - token: []
    post:
      tags:
        - status
      summary: comment a statu
      description: verify and post 
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: sid
          description: status ID
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: post a new comment
          schema:
            required:
              - content
            properties:
              content:
                type: string
      responses:
        200:
          description: OK
        401:
          description: verify failed
        402:
          description: statu not found
      security:
      - token: []
  /project/new/:
    post:
      tags:
        - project
      summary: build a new project
      description: admin can build a project by this API
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: POSTdata
          in: body
          description: required information to post a new project
          schema:
            required:
              - username
              - projectname
              - userlist
            properties:
              username:
                type: string
              projectname:
                type: string
              userlist:
                type: array
                items:
                  required:
                    - userID
                    - userName
                  properties:
                    userID:
                      type: integer
                    userName:
                      type: string
              intro:
                type: string
      responses:
        201:
          description: OK
        401:
          description: verify failed
        403:
          description: insufficient permissions
      security:
      - token: []
  /project/{pid}/member/:
    get:
      tags:
        - project
      summary: get a member list
      description: get
      produces:
        - application/json
      parameters:
        - in: path
          name: pid
          description: projectID
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            required:
              - memberList
            properties:
              memberList:
                type: array
                items:
                  required:
                    - userID
                    - username
                    - avatar
                  properties:
                    userID:
                      type: integer
                    username:
                      type: string
                    avatar:
                      type: string
      security:
      - token: []
    put:
      tags:
        - project
      summary: change the list of project members
      description: get groupID and list ,and change it
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: pid
          description: projectID
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: userlist
          schema:
            required:
              - userList
            properties:
              userList:
                type: array
                items:
                  type: integer
#                  required:
#                    - userID
#                  properties:
#                    userID:
#                      type: integer
      responses:
        200:
          description: change it successfully
        401:
          description: verify failed     
      security:
      - token: []
  /project/{pid}/:
    get:
      tags:
        - project
      summary: get the name & including of introduction
      description: return a string
      produces:
        - application/json
      parameters:
        - in: path
          name: pid
          description: projectID
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            required:
              - intro
              - name
              - userCount
            properties:
              intro:
                type: string
              name:
                type: string 
              userCount:
                type: integer 
      security:
      - token: []
    delete:
      tags:
        - project
      summary: delete a project
      description: only superuser
      produces:
        - application/json
      parameters:
        - in: path
          name: pid
          description: projectID
          required: true
          type: integer
      responses:
        200:
          description: OK
        401:
          description: verify failed
      security:
      - token: []
    post:
      tags:
        - project
      summary: edit introduction & name
      description: change introduction & name
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: pid
          description: projectID
          required: true
          type: integer
        - name: POSTdata
          in: body
          description: change including
          schema:
            required:
              - intro
              - name
            properties:
              intro:
                type: string
              name:
                type: string
      responses:
        201:
          description: edit successfully
        401:
          description: verify failed
        403:
          description: insufficient permissions
      security:
      - token: []

########

# FILE API WRITED BY CGH233




########

# DEFINITIONS
definitions:
  User:
    required:
      - id
      - name
      - email
      - avatar
      - tel
      - role
      - email_service
      - message
      - team_id
      - group_id
      - status
      - receiveMsgs
    properties:
      id:
        type: integer
        description: primary key
      name:
        type: string
        description: username
      email:
        type: string
        description: email address
      avatar:
        type: string
        description: avatar url
      tel:
        type: string
        description: telephone number
      role:
        type: integer
        description: role,100->superuser
      email_service:
        type: boolean
        description: open email_service or not
      message:
        type: boolean
        description: receive message or not
      team_id:
        type: integer
        description: foreign key of TEAM
      group_id:
        type: integer
        description: foreign key of GROUP
      status:
        description: status
      receiveMsgs: 
        description: messages
  Team:
    required:
      - id
      - name
      - count
      - time
      - creator
    properties:
      id:
        type: integer
        description: primary key
      name:
        type: string
        description: team name
      count:
        type: integer
        description: member count
      time:
        type: string
        description: time to create
      creator:
        type: integer
        description: foreign key of who create the team
  Group:
    required:
      - id
      - name
      - count
      - leader
    properties:
      id:
        type: integer
        description: primary key
      name:
        type: string
        description: group name
      count:
        type: integer
        description: member count
      leader:
        type: integer
        description: foreign key of who lead this team in this year      
  Project:
    required:
      - id
      - name
      - intro
      - time
      - count
      - team_id
      - files
    properties:
      id:
        type: integer
        description: primary key
      name:
        type: string
        description: project name
      intro:
        type: string
        description: project simple introduction
      time:
        type: string
        description: when this project was created
      count:
        type: integer
        description: user count
      team_id:
        type: integer
        description: foreign key of TEAM
      files:
        description: files
  User2Project:
    required:
      - id
      - user_id
      - project_id
    properties:
      id:
        type: integer
        description: primary key
      user_id:
        type: integer
        description: foreign key of USER
      projetc_id:
        type: integer
        description: foreign key of PROJECT
  Statu:
    required:
      - id
      - content
      - time
      - like
      - comment
      - user_id
      - comments
    properties:
      id:
        type: integer
        description: primary key
      content:
        type: string
        description: including of statu
      time:
        type: string
        description: the time you post this statu
      like:
        type: string
        description: the number your statu get LIKE!
      comment:
        type: string
        description: the number your statu's comment
      user_id:
        type: integer
        description: foreign key
      comments:
        description: comments
  File:
    required:
      - id
      - url
      - path
      - filename
      - creator
      - editor
      - kind
      - project_id
      - comments
    properties:
      id:
        type: integer
        description: primary key
      url:
        type: string
        description: URL of qiniu cloud
      path:
        type: string
        description: file basedir
      filename:
        type: string
        description: filename
      creator:
        type: integer
        description: foreign key of this file's creator
      editor:
        type: integer
        description: foreign key of this file lastest editor
      kind:
        type: integer
        description: is file or status doc
      project_id:
        type: integer
        description: foreign key of PROJECT
      comments:
        description: comments
  Comment:
    required:
      - id
      - kind
      - content
      - time
      - creator
      - file_id
      - statu_id
    properties:
      id:
        type: integer
        description: primary key
      kind:
        type: integer
        description: destination is file or statu  
      content:
        type: string
        description: comment including
      time:
        type: string
        description: post time
      creator:
        type: integer
        description: foreign key of poster
      file_id:
        type: integer
        description: if you comment FILE
      statu_id:
        type: integer
        description: if you comment STATU
  Message:
    required:
      - id
      - time
      - action
      - kind
      - readed
      - from_id
      - receive_id
      - file_id
      - statu_id
      - comment_id
    properties:
      id:
        type: integer
        description: primary key
      time:
        type: string
        description: birth time
      action:
        type: string
        description: such as 'LIKE','COMMENT','UPLOAD'...
      kind:
        type: integer
        description: FILE STATU or COMMENT
      readed:
        type: boolean
        description: readed or not readed
      from_id:
        type: integer
        description: foreign key of who make this message
      receive_id:
        type: integer
        description: who will receive it 
      file_id:
        type: integer
        description: if from file
      statu_id:
        type: integer
        description: if from statu
      comment_id:
        type: integer
        description: if from comment
